#summary NTFS timestamps and how to manipulate it with SetMACE.

= Introduction =

The SetMACE tool is a timestomp re-invention, and more like a timestomp on steriods. It is basically a tool to manipulate file timestamps on NTFS volumes. Thought it would fit nicely into this project page. 


= Details =

So what is file timestamps on NTFS? There exist 4 different timestamps that can be found in several of the attributes of a file. The different timestamps are MACE.

  * M: stands for last write time.
  * A: stands for last access time.
  * C: stands for creation time.
  * E: stands for change time ($MFT record)

The MACE values are 64-bit timestamps, which are the number of 100 nanoseconds since 01. January 1601 00:00:00 UTC. These values can further be found in the $STANDARD_INFORMATION and $FILE_NAME attributes. Additioanlly there may also exist more than 1 $FILE_NAME attribute for a file if the file name is longer than fitting the DOS naming. So for Win32 names there may exist 12 timestamps in the record.

The original way of changing the 4 MACE values, as implemented in timestomp, was to use the NtSetInformationFile function inside ntdll.dll and the FILE_BASIC_INFORMATION structure in FILE_INFORMATION_CLASS. That will let you change all 4 values in the $STANDARD_INFORMATION, but not in the $FILE_NAME attribute. I therefore added support for that in SetMACE to make it more interesting. The first version (v1005) implemented the file move trick, which sets the timestamps then move the file to a different folder before moving the file back again and resetting the timestamps. That effectively changed both attributes timestamps. However, evidence of such activity could be found in the $LogFile. Later in the next version (v1006) I added support for writing the $FILE_NAME timestamps directly to the physical disk, and eliminating the need to move the file around to set $FILE_NAME timestamps. Writing the timestamps to physical disk is an operation that by its nature impose rather big security implications. Luckily such access was locked down in nt6.x from Vista and later. Since nt6.x writing to physical disk is no longer possible to the systemdrive without a kernel mode driver. Kernel mode driver would use SL_FORCE_DIRECT_WRITE according to MS documentation. It is still possible though to write directly to physical disk on any NTFS volume not being the systemdrive on nt6.x. Booting to WinPE and write to local systemdrive will also work though, as will also the earlier move trick implemented in the previous version. The latest version, v1007, was completely re-written, to remove any depency on NtSetInformationFile and only modify timestamps by writing them directly to the disk. That require the tool to resolve NTFS accurately, in order to not mess up the volume, and should therefore be considered experimental. But it has been tested quite a lot, and seems stable. 

Interestingly, and only after writing v1006 of SetMACE, I truly realized how important the new security measures in nt6.x actually are. On nt5.x (XP, 2003) it's ridiculas.

= Some of the nice features of SetMACE =

  * Works on both 32-bit and 64-bit, from XP to Windows 8.
  * Accuracy down to the nanosec level.
  * Both $FILE_NAME and $STANDARD_INFORMATION timestamps.
  * Supports both files and directories.
  * Clone timestamps from a second file (removed in v1007).

You may find it handy to use MFTRCRD to dump the file record and see if your new timestamps are present.

= Limitations =

When will version 1007 not work?
  * Tweaking files off the systemdrive in Vista - Windows 8 when the OS is running.
  * Tweaking files on a volume where a pagefile is located (if OS is Vista - Windows 8).
  * Tweaking files on the same volume as setmace is located on (if OS is Vista - Windows 8).


= Syntax explanation =

*Parameter 1* is input/target file. Must be full path like C:\file.ext or c:\folder\file.ext

*Parameter 2* is determining which timestamp to update.
  * "-m" = LastWriteTime
  * "-a" = LastAccessTime
  * "-c" = CreationTime
  * "-e" = ChangeTime (in $MFT)
  * "-z" = all 4
  * "-d" = Dump existing timestamps (in UTC 0.00 and adjusted for timezone configuration)

*Parameter 3* is the wanted new timestamp. Format must be strictly followed like; "1954:04:01:22:39:44:666:1234". That is YYYY:MM:DD:HH:MM:SS:MSMSMS:NSNSNSNS. The smallest possible value to set is; "1601:01:01:00:00:00:000:0001". Timestamps are written as UTC and thus will show up in explorer as interpreted by your timezone location. Note that nanoseconds are supported.

*Parameter 4* determines if $STANDARD_INFORMATION or $FILE_NAME attribute or both should be modified.
  * "-si" will only update timestamps in $STANDARD_INFORMATION (4 timestamps), or just LastWriteTime, LastAccessTime and CreationTime (3 timestamps) for non-NTFS.
  * "-fn" will only update timestamps in $FILE_NAME (4 timestamps for short names and 8 timestamps for long names).
  * "-x" will update timestamps in both $FILE_NAME and $STANDARD_INFORMATION (8 or 12 timestamps depending on filename length).


= Examples =

===Setting all 4 timestamps in both $FILE_NAME and $STANDARD_INFORMATION attributes:===
setmace.exe C:\file.txt -z "2000:01:01:00:00:00:789:1234" -x

===Setting all 8 timestamps in the $FILE_NAME attribute for a file with long filename:===
setmace.exe "C:\alongfilename.txt" -z "2000:01:01:00:00:00:789:1234" -fn

===Setting 2 timestamps ($MFT creation time * 2) in the $FILE_NAME attribute for a file with long filename:===
setmace.exe "C:\alongfilename.txt" -e "2000:01:01:00:00:00:789:1234" -fn

===Setting all 4 timestamps in $STANDARD_INFORMATION attribute for a directory:===
setmace.exe D:\tmp -z "2000:01:01:00:00:00:789:1234" -si

===Setting the LastWriteTime in the $STANDARD_INFORMATION attribute:===
setmace.exe C:\file.txt -m "2000:01:01:00:00:00:789:1234" -si

===Dumping all timestamps for a file:===
setmace.exe C:\file.txt -d


= ToDo =
Open for suggestions.