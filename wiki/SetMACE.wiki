#summary NTFS timestamps and how to manipulate it with SetMACE.

= Introduction =

The SetMACE tool is timestomp reinvention with improvements I made some time ago. Thought it would fit nicely into this project page. It is basically a tool to manipulate file timestamps on NTFS volumes. 


= Details =

So what is file timestamps on NTFS? There exist 4 different timestamps that can be found in several of the attributes of a file. The different timestamps are MACE.

  * M: stands for last write time.
  * A: stands for last access time.
  * C: stands for creation time.
  * E: stands for change time ($MFT record)

The MACE values are 64-bit timestamps, which are the number of 100 nanoseconds since 01. January 1601 in UTC. These values can further be found in the $STANDARD_INFORMATION and $FILE_NAME attributes. Additioanlly there may also exist more than 1 $FILE_NAME attribute for a file if the file name is longer than fitting the DOS naming. So for Win32 names there may exist 12 timestamps in the record.

The original way of changing the 4 MACE values, as implemented in timestomp, was to use the NtSetInformationFile function inside ntdll.dll and the FILE_BASIC_INFORMATION structure in FILE_INFORMATION_CLASS. That will let you change all 4 values in the $STANDARD_INFORMATION, but not in the $FILE_NAME attribute. I therefore added support for that in SetMACE to make it more interesting. The first version (v1004) implemented the file move trick, which sets the timestamps then move the file to a different folder before moving the file back again and resetting the timestamps. That effectively changed both attributes timestamps. Later in the next version (v1006) I added support for writing the timestamps directly to the physical disk, and eliminating the need to move the file around to set $FILE_NAME timestamps. Writing the timestamps to physical disk is an operation that by its nature impose rather big security implications. Luckily such access was locked down in nt6.x from Vista and later. Since nt6.x writing to physical disk is no longer possible to the systemdrive without a kernel mode driver. It is still possible though to any NTFS volume not being the systemdrive on nt6.x. Booting to WinPE and write to local systemdrive will work though, as will also the earlier move trick. 

Interestingly, only after writing v1006 of SetMACE I truly realized how important the new security measures in nt6.x actually are. On XP it's ridiculas.

= Some of the nice features of SetMACE =

  * Works on both 32-bit and 64-bit, from XP to Windows 8.
  * Accuracy down to the nanosec level.
  * $FILE_NAME timestamps in addition to $STANDARD_INFORMATION.


You may find it handy to use MFTRCRD to dump the file record and see if your new timestamps are present.