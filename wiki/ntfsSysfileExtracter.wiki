#summary A systemfile (metafile) extraction utility for NTFS.

= Description =

It is basically using a handfull of winapi to read from physicaldisk and write backup to external file(s). It is not efficient in terms of speed for a number of reasons, but is easy to work with and customize, which is really the whole point besides learning. The application has a gui and will detect NTFS volumes which will be presented in a dropdown menu. Some verbose information will be displayed in the lower pane. A FileSelectFolder dialog will let you choose where to save output. It is possible to choose between 2 extraction modes: one to extract $MFT only, and one to extract all. The interesting thing here (for those not already familiar), is that by using this method of carving files through the $DATA attribute in $MFT you can copy files otherwise locked (ie the SAM or SYSTEM hive). It's main purpose is to provide input ($MFT) for the mft2csv application.

= Experiment =

Actually, there is a third extraction method available, where you can extract any file on the volume. Type in the MFT record number of the target file in the inputfield and press the button "Extract Record numbers DATA". It will recursively resolve the runs and copy the files data directly off physicaldisk. So how do you know the record number? Well, look in the csv generated by mft2csv. Verify this with your SAM for instance. Copying of files in this way, will effectively circumvent restrictions otherwise imposed if done through the filesystem.

= Limitations =

Some limitations are present. Only $DATA attribute is currently supported, which means that for instance the $SECURITY_DESCRIPTOR is missed. That is on the ToDo list. 

= Latest Version =

v1.5

= Changelog =

v1.5 Fixed extraction of resident data. Temporarily forgot that ReadFile on physical disks only handle chunks of data aligned to sector size.

v1.4 Solved several bugs in the solution that calculated runs. Negative moves where reloved wrongly. And very fragmented files with runs located past record offset 0x1fd was also incorrectly solved. Actually that last fix also fixed decoding of attributes extending over that same offset. Note however that compressed and/or sparse files are not yet supported for extraction. I therefore added a break when trying to extract such a file.

v1.3 Added a FileSelectFolder function to specify where to save the output. Removed the default ".bin" extension, so that the outputted extension is as given in $MFT.

v1.2 Large files are now supported, because extraction split chunks in 40 MB each at most. That means the $LogFile or any other large file can be exported fine. Also fixed fragmentation in $MFT itself when attempting raw extract functionality by record number. That means it should now work regardless of size and fragmentation in either $MFT or target file. The extraction now also targets real size as opposed to allocated size, and prevents slack data to be appended.

v1.1. Tiny error inside the function _GetAllRuns() as well as when calling it. Wrong variabel name was used pluss a wrong offset. I believe runs are correctly solved now as my SOFTWARE hive is extractable and mountable. But because $MFT fragmentation is not really working I've temporarily put a hardcoded exit after record 1000, until it's fixed.


= ToDo =

  * Add an option to supply file+path as input for the third experimental extraction mode.