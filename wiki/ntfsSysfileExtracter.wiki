#summary A File Extraction utility for NTFS.

= Description =

It is basically using a handfull of winapi to read from physicaldisk and write backup to external file(s). The application has a gui and will detect NTFS volumes which will be presented in a dropdown menu. Some verbose information will be displayed in the lower pane. A FileSelectFolder dialog will popup when starting the program and let you choose where to save extracted files. Then select the target volume from the dropdown menu on the top. There are several modes to use for extraction:

1. Extract $MFT only.

2. Extract all NTFS system files.

3. Select a file from the volume by browsing to it.

4. Type in the record number (IndexNumber) to extract.

The tool will extract all $DATA attributes for a file. That be resident, non-resident, named data stream (ADS), regardless of how many $DATA attributes that are tied to a file. In latest version compression and $ATTRIBUTE_LIST is also solved, which means huge compressed files and/or extremely fragmented files can be extracted too. Interesting is it also to note that such raw extraction from physical disk is bypassing file access restrictions otherwise imposed by the filesystem. For instance the SAM or SYSTEM hive can be extracted by using method 4, which would otherwise be locked. Extraction of the NTFS system files with method 1, 2 or 4 is also not possible by normal tools in Windows like explorer.

The extracted $MFT is perfect to feed into mft2csv, which will decode the file records and produce a csv with the information.

So how do you know the record number? Well, look in the csv generated by mft2csv.


= Limitations =

Some limitations are present. Only $DATA attributes is currently supported, which means that for instance the $SECURITY_DESCRIPTOR is missed. That is on the ToDo list. 

= Latest Version =

v1.6

= Changelog =

v1.6 Temporary fix for $MFT record size, now fixed at 1024 bytes (2 sectors) (but must be changed to correct formula later anyway), that caused issues on certain volumes. Also fixed support for unicode names in output. 

Added preliminary/experimental support for extraction of compressed files.

v1.5 Fixed extraction of resident data. Temporarily forgot that ReadFile on physical disks only handle chunks of data aligned to sector size.

v1.4 Solved several bugs in the solution that calculated runs. Negative moves where reloved wrongly. And very fragmented files with runs located past record offset 0x1fd was also incorrectly solved. Actually that last fix also fixed decoding of attributes extending over that same offset. Note however that compressed and/or sparse files are not yet supported for extraction. I therefore added a break when trying to extract such a file.

v1.3 Added a FileSelectFolder function to specify where to save the output. Removed the default ".bin" extension, so that the outputted extension is as given in $MFT.

v1.2 Large files are now supported, because extraction split chunks in 40 MB each at most. That means the $LogFile or any other large file can be exported fine. Also fixed fragmentation in $MFT itself when attempting raw extract functionality by record number. That means it should now work regardless of size and fragmentation in either $MFT or target file. The extraction now also targets real size as opposed to allocated size, and prevents slack data to be appended.

v1.1. Tiny error inside the function _GetAllRuns() as well as when calling it. Wrong variabel name was used pluss a wrong offset. I believe runs are correctly solved now as my SOFTWARE hive is extractable and mountable. But because $MFT fragmentation is not really working I've temporarily put a hardcoded exit after record 1000, until it's fixed.


= ToDo =

  * Optionally choose which attribute to extract.
 