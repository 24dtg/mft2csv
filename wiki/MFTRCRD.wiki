#summary A command line $MFT record dumper and decoder.

= Introduction =

This tool will decode the $MFT record for a given file. It is a combination of mft2csv and NtfsFileExtracter. That means it is a tool for quick decode and dumping of file records. It does not write any csv, but dumps the information to the console. It is very handy when testing stuff and learning NTFS, as you can do stuff to a file and get it decoded right away, without first having to extract the whole $MFT and then decode it to a csv, before importing it into Excel or something and get the actual result. MFTRCRD is therefore for quick dumping of record information for individual files, whereas mft2csv is for decoding the complete $MFT with all its records, which may be a substantial amount and timeconsuming task.

It supports both file name+path and IndexNumber (MFT record) as input (param1). One switch (param3) is for optimizing decode speed when $ATTRIBUTE_LIST is present for a given file. For most usage, set param3 as attriblist=off. That will produce faster output. Only set param3 as attriblist=on when there is an $ATTRIBUTE_LIST attribute present. Another switch (param4) is for choosing wether to hexdump resolved INDX records from the $INDEX_ALLOCATION attribute.

Attributes currently handled:
  * $STANDARD_INFORMATION
  * $ATTRIBUTE_LIST
  * $FILE_NAME
  * $OBJECT_ID
  * $SECURITY_DESCRIPTOR (just raw hex dump)
  * $VOLUME_NAME
  * $VOLUME_INFORMATION
  * $DATA
  * $INDEX_ROOT
  * $INDEX_ALLOCATION
  * $BITMAP (just raw hex dump)
  * $REPARSE_POINT
  * $EA_INFORMATION
  * $EA
  * $LOGGED_UTILITY_STREAM

Detailed runs information for $DATA can be retrived with version v1006.

Here is a sample console dump (older version): http://mft2csv.googlecode.com/files/dump_MTFRCRD.zip 


= How to run MFTRCRD =

It is command line and the syntax is:

=== Usage: "MFTRCRD param1 param2 param3 param4" ===

param1 can be a valid file path or an IndexNumber ($MFT record number)

param2 can be -d or -a:
-d means just decode $MFT entry
-a same as -d but also dumps the whole $MFT entry to console

param3 is for optimizing speed of processing and can be either attriblist_on or attriblist_off. attriblist_on is for faster processing when $ATTRIBUTE_LIST is present.

param4 for specifying wether to hexdump complete INDX records and can be either indxdump=on or indxdump=off. Beware that indxdump=on may generate a significant amount of dump to console for certain directories.

=== Example for dumping an $MFT decode for boot.ini: ===

MFTRCRD C:\boot.ini -d attriblist=off indxdump=off

=== Example for dumping an $MFT decode + a 1024 byte $MFT record dump for $MFT itself from the C: drive: ===

MFTRCRD C:0 -a attriblist=off indxdump=off

=== Example for dumping an $MFT decode for $LogFile from the D: drive: ===

MFTRCRD D:2 -d attriblist=off indxdump=off

=== Example for dumping a speed optimized $MFT decode for an extremely fragmented file with $ATTRIBUTE_LIST present: ===

MFTRCRD C:\ExtremelyFragmented.bin -d attriblist=on indxdump=off

=== Example for dumping an $MFT record decode + hexdump of its resolved INDX records for the root directory on C:, equivalent to the 'folder' named C:\ ===

MFTRCRD C:5 -d attriblist=off indxdump=on


Running the tool without any parameter will display help information.


= Latest version =
v1.0.0.11

= Changelog =

v1.0.0.11: Changed syntax slightly, and introduced a new parameter called indxdump. Fixed lots of stuff for INDX records decoding. Still unknown why some duplicate entries appear though.

v1.0.0.10: Added test decode of $INDEX_ROOT and $INDEX_ALLOCATION. Added INDX record decoding and raw hex dump.

v1009: Added decoding of resident and nonresident $REPARSE_POINT, $EA_INFORMATION, $EA and $LOGGED_UTILITY_STREAM. Added an extra switch to speed up $MFT processing when $ATTRIBUTE_LIST is present/not present. Fixed an extra error in the raw hex dump of $EA.

v1008: Now hexdumps of all attributes are displayed with the -a switch, and not just the ones that are decoded.

v1007: Switched code base to the same as of NTFS File Extracter. Now full $ATTRIBUTE_LIST is decoded and resolved. A pregeneration of an internal $MFT array is added to substantially speed up decoding of files with attribute list. Added raw dump of record slack.